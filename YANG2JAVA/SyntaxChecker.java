/* Generated By:JavaCC: Do not edit this line. SyntaxChecker.java */
package YANG2JAVA;
public class SyntaxChecker implements SyntaxCheckerConstants {

  static final public int start() throws ParseException {
    wff();
    {if (true) return 0;}  // returns 0 on successful parse

    throw new Error("Missing return statement in function");
  }

  static final public void wff() throws ParseException {
    P();
    jj_consume_token(0);
  }

  static final public void P() throws ParseException {
    jj_consume_token(5);
    jj_consume_token(ID);
    jj_consume_token(17);
    block();
    jj_consume_token(18);
  }

  static final public void block() throws ParseException {
    jj_consume_token(6);
    jj_consume_token(String);
    jj_consume_token(16);
    jj_consume_token(7);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      break;
    case String:
      jj_consume_token(String);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(16);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 12:
      case 28:
      case 39:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 28:
        jj_consume_token(28);
        jj_consume_token(String);
        jj_consume_token(16);
        break;
      case 39:
        jj_consume_token(39);
        jj_consume_token(String);
        jj_consume_token(16);
        break;
      case 12:
        IM();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    body_stmt();
  }

  static final public void IM() throws ParseException {
    label_2:
    while (true) {
      jj_consume_token(12);
      jj_consume_token(ID);
      jj_consume_token(17);
      jj_consume_token(7);
      jj_consume_token(ID);
      jj_consume_token(16);
      jj_consume_token(18);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 12:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
    }
  }

  static final public void body_stmt() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 8:
      case 9:
      case 10:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 8:
        typedef_stmt();
        break;
      case 9:
        container_stmt();
        break;
      case 10:
        datadef_stmt();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void typedef_stmt() throws ParseException {
    jj_consume_token(8);
    jj_consume_token(ID);
    jj_consume_token(17);
    type_stmt();
    jj_consume_token(18);
  }

  static final public void type_stmt() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 22:
        jj_consume_token(22);
        jj_consume_token(27);
        jj_consume_token(16);
        break;
      case 13:
        jj_consume_token(13);
        jj_consume_token(String);
        jj_consume_token(16);
        break;
      case 15:
        jj_consume_token(15);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 19:
          jj_consume_token(19);
          break;
        case 20:
          jj_consume_token(20);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(16);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
      case 15:
      case 22:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
    }
  }

  static final public void datadef_stmt() throws ParseException {
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        container_stmt();
        break;
      case 10:
        list_stmt();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
      case 10:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
    }
  }

  static final public void list_stmt() throws ParseException {
    jj_consume_token(10);
    jj_consume_token(ID);
    jj_consume_token(17);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
      case 24:
      case 27:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 24:
          jj_consume_token(24);
          break;
        case 27:
          jj_consume_token(27);
          break;
        case 14:
          jj_consume_token(14);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case String:
          jj_consume_token(String);
          break;
        case ID:
          jj_consume_token(ID);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(16);
        break;
      case 10:
        stmt1();
        break;
      case 30:
        max_stmt();
        break;
      case 11:
        leaf_stmt();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 10:
      case 11:
      case 14:
      case 24:
      case 27:
      case 30:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
    }
    jj_consume_token(18);
  }

  static final public void max_stmt() throws ParseException {
    jj_consume_token(30);
    jj_consume_token(number);
    jj_consume_token(16);
  }

  static final public void container_stmt() throws ParseException {
    jj_consume_token(9);
    jj_consume_token(ID);
    jj_consume_token(17);
    stmt();
    jj_consume_token(18);
  }

  static final public void stmt() throws ParseException {
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 10:
        list_stmt();
        break;
      case 13:
      case 15:
      case 22:
        type_stmt();
        break;
      case 11:
        leaf_stmt();
        break;
      case 31:
        leaflist_stmt();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 10:
      case 11:
      case 13:
      case 15:
      case 22:
      case 31:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
    }
  }

  static final public void stmt1() throws ParseException {
    jj_consume_token(10);
    jj_consume_token(ID);
    jj_consume_token(17);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
      case 24:
      case 27:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 24:
          jj_consume_token(24);
          break;
        case 27:
          jj_consume_token(27);
          break;
        case 14:
          jj_consume_token(14);
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case String:
          jj_consume_token(String);
          break;
        case ID:
          jj_consume_token(ID);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(16);
        break;
      case 11:
        leaf_stmt();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
      case 14:
      case 24:
      case 27:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_8;
      }
    }
    jj_consume_token(18);
  }

  static final public void leaflist_stmt() throws ParseException {
    label_9:
    while (true) {
      jj_consume_token(31);
      jj_consume_token(ID);
      jj_consume_token(17);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 13:
        case 22:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_10;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 22:
          type1_stmt();
          break;
        case 13:
          jj_consume_token(13);
          jj_consume_token(String);
          jj_consume_token(16);
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(18);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_9;
      }
    }
  }

  static final public void leaf_stmt() throws ParseException {
    label_11:
    while (true) {
      jj_consume_token(11);
      jj_consume_token(ID);
      jj_consume_token(17);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 13:
        case 22:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 22:
          type1_stmt();
          break;
        case 13:
          jj_consume_token(13);
          jj_consume_token(String);
          jj_consume_token(16);
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(18);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_11;
      }
    }
  }

  static final public void type1_stmt() throws ParseException {
    jj_consume_token(22);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      break;
    case 14:
    case 24:
    case 27:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        jj_consume_token(24);
        break;
      case 27:
        jj_consume_token(27);
        break;
      case 14:
        jj_consume_token(14);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(16);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
      case 26:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        jj_consume_token(25);
        jj_consume_token(19);
        break;
      case 26:
        jj_consume_token(26);
        jj_consume_token(number);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(16);
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SyntaxCheckerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x10001000,0x10001000,0x1000,0x700,0x700,0x180000,0x40a000,0x40a000,0x600,0x600,0x9004000,0x0,0x49004c00,0x49004c00,0x8040ac00,0x8040ac00,0x9004000,0x0,0x9004800,0x9004800,0x402000,0x402000,0x80000000,0x402000,0x402000,0x800,0x9004000,0x9004000,0x6000000,0x6000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x41,0x80,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x41,0x0,0x0,0x0,0x0,0x0,0x41,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public SyntaxChecker(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SyntaxChecker(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SyntaxCheckerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SyntaxChecker(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SyntaxCheckerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SyntaxChecker(SyntaxCheckerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SyntaxCheckerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

 /* public static void main(String args []) throws ParseException
  {
     try
     {
        //FileInputStream yangfile=new FileInputStream("C:/Users/Manisha/Desktop/project/programs/Demo/src/input.yang");
        //new SyntaxChecker(yangfile.P());
        String input="module example-sports { }"; 
        new SyntaxCheckerinput.P();
            System.out.println("Syntax is okay");
        }
        catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }*/
}
